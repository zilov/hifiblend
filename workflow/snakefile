OUTDIR = config["outdir"]
FASTQ = config["fastq"]
ASSEMBLER = config["assembler"]
BUSCO_LINEAGE = config["busco_lineage"]
THREADS = config["threads"]
HIC_FR = config['fr']
HIC_RR = config['rr']
EXECUTION_FOLDER = config['execution_folder']
GENOME_SIZE = config['genome_size']
COVERAGE = config['coverage']
ASSEMBLY = config['assembly']
SCAFFOLD = config['scaffold']
REFERENCE = config['reference']
PREFIX = config['prefix']
K = config["k"]
MERYL_DB = config["meryl_db"]
SV = config["sv"]

READS = FASTQ

rule all:
    input:
        qc_final = f"{OUTDIR}/{PREFIX}_final_qc.tsv"

        
rule envs:
    params:
        hifiasm = "../envs/hifiasm.yaml",
        flye = "../envs/flye.yaml",
        canu = "../envs/canu.yaml",
        lja = "../envs/lja.yaml",
        busco = "../envs/busco.yaml",
        quast = "../envs/quast.yaml",
        gfatools = "../envs/gfatools.yaml",
        coverage = "../envs/coverage.yaml",
        ragtag = "../envs/ragtag.yaml",
        verkko = "../envs/verkko.yaml",
        nextdenovo = "../envs/nextdenovo.yaml",
        merfin = "../envs/merfin.yaml",
        genomescope = "../envs/genomescope.yaml",
        slizer = "../envs/slizer.yaml",
        minimap2 = "../envs/minimap2.yaml",
        sniffles = "../envs/sniffles.yaml"


envs = rules.envs.params

if not ASSEMBLY:
    if ASSEMBLER == "hifiasm":
        include: "../rules/hifiasm.smk"
        ASSEMBLY = rules.gfa_to_fa.output.assembly_fa
    elif ASSEMBLER == "flye":
        include: "../rules/flye.smk"
        ASSEMBLY = rules.flye.output.assembly
    elif ASSEMBLER == "hifiasm_hic":
        include: "../rules/hifiasm_hic.smk"
        ASSEMBLY = rules.gfa_to_fa.output.assembly_fa
    elif ASSEMBLER == "canu":
        include: "../rules/canu.smk"
        ASSEMBLY = rules.canu.output.assembly
    elif ASSEMBLER == "lja":
        include: "../rules/lja.smk"
        ASSEMBLY = rules.lja.output.assembly
    elif ASSEMBLER == "verkko":
        include: "../rules/verkko.smk"
        ASSEMBLY = rules.verkko.output.assembly
    elif ASSEMBLER == "verkko_hic":
        include: "../rules/verkko_hic.smk"
        ASSEMBLY = rules.verkko_hic.output.assembly
    elif ASSEMBLER == "nextdenovo":
        include: "../rules/nextdenovo.smk"
        ASSEMBLY = rules.nextdenovo.output.assembly


if SCAFFOLD:
    include: "../rules/scaffold.smk"
    ASSEMBLY = rules.correct.output

include: "../rules/quast.smk"

if BUSCO_LINEAGE:
    include: "../rules/busco.smk"

if COVERAGE or SV:
    include: "../rules/minimap2_align.smk"

if COVERAGE:
    include: "../rules/slizer.smk"

if SV:
    include: "../rules/sniffles.smk"

if not MERYL_DB:
    include: "../rules/build_meryl_reads_db.smk"
    MERYL_DB = rules.meryl_build_db.output.meryl_db_folder

include: "../rules/meryl.smk"
include: "../rules/genomescope.smk"
include: "../rules/merfin.smk"
include: "../rules/combine_qc.smk"
from pathlib import Path, PurePath

# read config

OUTDIR = config["outdir"]
FASTQ = config["fastq"]
BAM = config["bam"]
ASSEMBLER = config["assembler"]
BUSCO_LINEAGE = config["busco_lineage"]
THREADS = config["threads"]
#HAPLOMERGE = config["haplomerge"]
#MERGE_TOOL = config["merge_tool"]
HIC_FR = config['fr']
HIC_RR = config['rr']


READS = FASTQ or BAM

PREFIX = PurePath(READS).stem

rule all:
    input:
        quast = f"{OUTDIR}/quast/report.txt",
        busco =  f"{OUTDIR}/busco/{PREFIX}_specific.txt" if BUSCO_LINEAGE else "",
        
rule envs:
    params:
        hifiasm = "../envs/hifiasm.yaml",
        flye = "../envs/flye.yaml",
        canu = "../envs/canu.yaml",
        lja = "../envs/lja.yaml",
        verkko = "../envs/eggnog.yaml",
        busco = "../envs/busco.yaml",
        quast = "../envs/quast.yaml",
        gfatools = "../envs/gfatools.yaml"
      
envs = rules.envs.params

if ASSEMBLER == "hifiasm":
    include: "../rules/hifiasm.smk"
if ASSEMBLER == "hifiasm_hic":
    include: "../rules/hifiasm_hic.smk"
elif ASSEMBLER == "flye":
    include: "../rules/flye.smk"
    ASSEMBLY = rules.flye.output.assembly
elif ASSEMBLER == "canu":
    include: "../rules/canu.smk"
    ASSEMBLY = rules.canu.output.assembly
elif ASSEMBLER == "lja":
    include: "../rules/lja.smk"
    ASSEMBLY = rules.lja.output.assembly
elif ASSEMBLER == "verkko":
    include: "../rules/verkko.smk"
    ASSEMBLY = rules.verkko.output.assembly

# if HAPLOMERGE:
#     if MERGE_TOOL == 'purgedups':
#         include: "../rules/purgedups.smk"
#     elif MERGE_TOOL == 'mabs':
#         include: "../rules/mabs.smk"

include: "../rules/quast.smk"

if BUSCO_LINEAGE:
    include: "../rules/busco.smk"
